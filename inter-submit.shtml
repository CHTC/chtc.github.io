
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>
<script type="text/javascript">

  function resizeIframe(iframe) {
    var newheight;
    var newwidth;

    if(document.getElementById){
        newwidth=iframe.contentWindow.document.body.scrollWidth;
        newheight=iframe.contentWindow.document.body.scrollHeight;
    }

    iframe.height= (newheight) + "px";
    iframe.width= (newwidth) + "px";
  }
</script>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Compiling or Testing Code with an Interactive Job</title>

<link href="/web.css" rel="stylesheet" type="text/css">
</head>
<body leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">

<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
   <td width="1%" align="left" class="bgred" valign="top">
      <div align="center">
      &nbsp;<br>
      <a href="http://www.wisc.edu">

      <img src="/images/uw-sm-red.png" width="125" height="46" border="0"> </a>
       </div>

	<ul class="sidebar">
	<li><a href="/">CHTC Home</a></li>
	
	<li>About
		<ul>
		<li><a href="/approach.shtml">Our Approach</a></li>
<!--comment		<li><a href="/resources.shtml">Our Resources</a></li>   -->
		<li><a href="/projects.shtml">Our Customers</a></li>
		<li><a href="/people.shtml">Our Staff</a></li>
		<li><a href="/jobs.shtml">Our Open Positions</a></li>
		</ul>
	</li>
	
	<li>How To's
		<ul>
		<li><a href="/get-started.shtml">Get Started</a></li>
		<li><a href="/get-help.shtml">Get Help</a></li>
        	<li><a href="/guides.shtml">All User Guides</a></li>
                <li><a href="/use-submit-node.shtml">Use an HTC Submit Server</a></li>
		<li><a href="/helloworld.shtml">Run Your First HTC Jobs</a></li>
		<li><a href="/howto_overview.shtml">HTC for MatLab, Python or R</a></li>
		<li><a href="/HPCuseguide.shtml">Use the HPC Cluster</a></li>
		<li><a href="/cite-chtc.shtml">Cite CHTC Resources</a></li>
		</ul>
	</li>
	<li><a href="/user-news.shtml">User News</a></li>
	<li>Other Resources
		<ul>
		<!--<li><a href="http://monitor.chtc.wisc.edu/uw_condor_usage/usage1.shtml">Pool Usage Reports</a></li>-->
<!--comment		<li><a href="/opmetrics.shtml">Operational Metrics</a></li>  -->
		<li><a href="/gpu-lab.shtml">CHTC GPU Lab</a></li>
		<li><a href="http://research.cs.wisc.edu/htcondor/">HTCondor Project</a></li>
		<li><a href="http://www.neos-server.org/">NEOS Optimization Service</a></li>
		<li><a href="http://www.opensciencegrid.org/">Open Science Grid</a></li>
		<li><a href="http://wid.wisc.edu/">WID (Wisconsin Institute for Discovery)</a></li>
		</ul>
	</li>
	</ul>

	</td>

<td width="97%" valign="top"> 


	<TABLE SUMMARY="Navigation layout" BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
<TR ALIGN="left"> 
  <TD WIDTH="100%" height="400" Align="left" VALIGN="top"> 
    <A  name="body"></a> 
	<div id = "main">

<!-- Top of Page Body -->
<table BORDER="0" WIDTH="100%">
<!-- <h1 align=left valign=center>The Center for High Throughput Computing</h1> -->

	

<div id="osg_power"> <span style="height: 20px">Powered by:</span><br /><a href="http://opensciencegrid.org"><img alt="Open Science Grid" src="/images/Open_Science_Grid_Consortium(Logo).jpg" width="123" height="70" /></a></div>

	

<div id="hours"> <span style="height: 20px">
	<center><b>Follow us on social media:</b><a href="https://twitter.com/CHTC_UW"><img alt="Twitter" src="/images/twitter.png" width="70" height="70"></center></a></span></div>
	
	
<div id="hours"> <span style="height: 40px">
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<a href="http://chtc.cs.wisc.edu/get-help.shtml" style="color:white;">
<b>Office Hours!</b>
<br>
Tues/Thurs, 3-4:30pm<br>
Click for details</a>
<p style="margin-bottom: 1px;"></p>
<a href="http://chtc.cs.wisc.edu/sign-in.shtml" style="color:white;">Sign-In Here</a>
</a></span></div>	


	


<div style="margin-top:1em;"><a href="http://chtc.cs.wisc.edu/"><img alt="Center for High Throughput Computing" src="/images/CHTC-logo.png" width="500" height="90"></a></div>

<h1>Compiling or Testing Code with an Interactive Job</h1>


<p><b>To best understand the below information, users 
should already have an understanding of:</b>
</p>
<ul>
	<li>Using the command line to: navigate within directories, 
	create/copy/move/delete files and directories, and run their 
	intended programs (aka "executables").</li>
	<li><a href="http://chtc.cs.wisc.edu/helloworld.shtml">The CHTC's Intro 
	to Running HTCondor Jobs</a></li>
</ul>

<h1>Overview</h1>

<p>This guide provides a generic overview of steps required to install scientific
software for use in CHTC. If you are using Python, R, or Matlab, see our specific 
installation and use guides here: <a href="/howto_overview.shtml">Guides for Matlab, Python and R</a>.</p>

<!--<p>Once you've created a portable software installation, see our <a href="">Job 
Executable Creation</a> guide for more details of how to use your software in a job.</p>-->

<p><a name="build"></a></p>
<h1>1. Building a Software Installation</h1>

<p>You are going to start an interactive job that runs on the HTC build servers. 
You will then install your packages to a 
folder and zip those files to return to the submit server.</p>

<p><a name="version"></a></p>
<h2>A. Submit an Interactive Job</h2>

<p>First, download the source code for your software to the submit 
server.  Then create the following special submit file on the submit server, calling it 
something like <code>build.sub</code>. </p>

<pre class="sub">
# Software build file

universe = vanilla
log = interactive.log

# change the name of the file to be the name of your source code
transfer_input_files = <i>source_code</i>.tar.gz

+IsBuildJob = true
requirements = (OpSysMajorVer =?= 7)
request_cpus = 1
request_memory = 2GB
request_disk = 2GB

queue
</pre>

<p>The only thing you should need to change in the above file is the name of 
the source code <code>tar.gz</code> file - in the "transfer_input_files" line.</p>

<p>Once this submit file is created, you will start the interactive job by 
running the following command: </p>
<pre class="term">
[alice@submit]$ condor_submit -i <i>build.sub</i>
</pre>

<p>The interactive build job should start in about a minute. Once it has started, 
the job has a time limit of four hours - if you need more time to compile a 
particular code, talk to CHTC's Research Computing Facilitators. </p>

<h2>B. Install the Software</h2>

<p>Software installation typically goes through a set of standard steps -- configuration, 
then compilation (turning the source code into binary code that the computer can 
understand), and finally "installation", which means placing the compiled code into 
a specific location.  In most install instructions, these steps look something like:

<pre class="other">./configure
make
make install</pre>
</p>

<p>There are two changes we make to this standard process. Because you are not an 
administrator, you will want to create a folder for the installation in the build 
job's working directory and use an option in the configuration step that will install
the software to this folder. 
</p>

<p>In what follows, <b>note that anything in italics is a name that you can (and should!) 
choose to be more descriptive</b>. We use general names as an example; see the LAMMPS case 
study lower down to see what you might fill in for your own program.</p>

<ol>
<li><p>In the interactive job, create a new directory to hold your final software installation: </p>

<pre class="term">[alice@build]$ mkdir <i>program</i></pre></li>

<li><p>You'll also want to un-tar the source code that you brought along, and <code>cd</code>
into the source code folder. </p>

<pre class="term">[alice@build]$ tar -xzf <i>source_code</i>.tar.gz
[alice@build]$ cd <i>source_code/</i></pre></li>

<li><p>Our next step will be to configure the installation. This involves changing into the 
un-tarred source code directory, and running a configuration script.  It's at this 
step that we change the final installation location of the software from its default, to 
be the directory we created in the previous step. In a typical configure script, this 
option is called the "prefix" and is given by the <code>--prefix</code> flag. </p>

<pre class="term">[alice@build]$ ./configure --prefix=$_CONDOR_SCRATCH_DIR/<i>program</i></pre>

<p>Note that there are sometimes different options used.  Some program use a helper 
program called <code>cmake</code> as their configuration script. 
Often the installation instructions for a program will indicate 
what to use as a prefix option, or, you can often run the configure command with the 
<code>--help</code> flag, which will have all the options which can be added to 
the configure command.</p> </li>

<li><p>After the configuration step, you'll run the steps to compile and install your 
program. This is usually these two commands: </p>

<pre class="term">[alice@build]$ make
[alice@build]$ make install</pre></li>

<li><p>After this step, you can <code>cd</code> back up to the main working directory. </p>

<pre class="term">[alice@build]$ cd ..</pre></li>

<li><p>Right now, if we exit the interactive job, nothing will be transferred back 
because we haven't created any new <b>files</b> in the working directory, just 
the new sub-folder with our software installation. 
In order to transfer back our installation, we will 
need to compress it into a tarball file - not only will HTCondor then transfer 
back the file, it is generally easier to transfer 
a single, compressed tarball file than an uncompressed set of directories.</p>

<p>Run the following command to create your own tarball of your packages: 
<pre class="term">[alice@build]$ tar -czf <i>program</i>.tar.gz <i>program/</i></pre>
</p></li>
</ol>

<p>We now have our packages bundled and ready for CHTC!  
You can now exit the interactive job and the 
tar.gz file with your software installation will return to the submit server with you (this 
sometimes takes a few extra seconds after exiting).</p>
<pre class="term">[alice@build]$ exit </pre>

<!--<p>In order to use your new installation in a job, see our guide on <a href="">Wrapper Scripts</a>.</p>-->

<p><a name="case-study"></a></p>
<h1>2. Case Study, Installing LAMMPS</h1>

<p>First download a copy of LAMMPS and copy it 
to the submit server -- in this example, we've used the "stable" 
version under "Download a tarball": 
<a href="https://lammps.sandia.gov/download.html">LAMMPS download page</a> </p>

<p>Then, make a copy of the submit file above on the submit server, changing the 
name of the file to be transferred to <code>lammps-stable.tar.gz</code>. Submit 
the interactive job as described.</p>

<p>While waiting for the interactive build job to start, take a look at the 
installation instructions for LAMMPS: 
<ul><li><a href="https://lammps.sandia.gov/doc/Build_cmake.html">LAMMPS Install Instructions</a></li></ul></p>

<p>You'll see that the install instructions have basically the same steps as 
listed above, with two changes: 
<ol>
<li>Instead of the "configure" step, LAMMPS is using the 
"cmake" command. This means that we'll need to find the equivalent to the 
<code>--prefix</code> option for cmake. Reading further down in the documentation, 
you can see that there's this option: 
<pre class="other">-D CMAKE_INSTALL_PREFIX=path</pre>
This is exactly what we need to set the installation prefix. </li>
<li>There's extra steps before the configure step -- that's fine, we'll just 
add them to our list of commands to run. </li>
</ol>
</p>

<p>With all these pieces together, this is what the commands will look like to 
install LAMMPS in the interactive build job and then bring the installed copy 
back to the submit server. </p>

<p>Create the folder for the installation:</p>
<pre class="term">[alice@build]$ mkdir lammps
</pre>

<p>Unzip and <code>cd</code> into a build directory:</p>
<pre class="term">
[alice@build]$ tar -xf lammps-stable.tar.gz
[alice@build]$ cd lammps-stable
[alice@build]$ mkdir build; cd build 
</pre>

<p>Run the installation commands:</p>
<pre class="term">
[alice@build]$ cmake -D CMAKE_INSTALL_PREFIX=$_CONDOR_SCRATCH_DIR/lammps ../cmake &lt;/i&gt;
[alice@build]$ make
[alice@build]$ make install </pre>

<p>Move back into the main job directory and create a tar.gz file of the installation folder.</p>
<pre class="term">
[alice@build]$ cd ../..
[alice@build]$ tar -czf lammps.tar.gz lammps
[alice@build]$ exit</pre>
<p><br /></p>
<blockquote>
For older version of this guide, see out <a href="archived/inter-submit.shtml">archived page</a>.
</blockquote>




<div id = "copyright">
     <p align = "center"> 
	  
     For all user support, questions, and comments:
     <strong><a href="mailto:chtc@cs.wisc.edu">chtc@cs.wisc.edu</a></strong>

</p>
</div>

</div>

  </td>
  </tr>

</TABLE>
</td>
</table>

</body>
</html>


